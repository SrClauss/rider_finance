#user  nobody;
worker_processes  auto;

# Atualizando o caminho do log de erros para um diretório válido
error_log /var/log/nginx/error.log;
# Adicionar comando para criar o diretório de logs
RUN mkdir -p /etc/nginx/logs

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout 65;
     #user  nobody;
    worker_processes  auto;

     # Atualizando o caminho do log de erros para um diretório válido
    error_log /var/log/nginx/error.log;

     #pid        logs/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       mime.types;
        default_type  application/octet-stream;
        sendfile        on;
        keepalive_timeout 65;
        client_max_body_size 10M;

        # map for websocket upgrade header
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        # Gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text_xml application_xml application_xml+rss text/javascript;

        # Upstream servers (use Docker service names when running in compose)
        upstream backend {
            server backend:8000;
        }
        upstream frontend {
            server frontend:3000;
        }

        # Redirect HTTP to HTTPS for production domains
        server {
            listen 80;
            server_name gpsfinanceiro.com.br www.gpsfinanceiro.com.br;
            # Let Certbot handle ACME challenges when needed
            location /.well-known/acme-challenge/ {
                root /var/www/html;
            }
            # Redirect all other traffic to HTTPS
            location / {
                return 301 https://$host$request_uri;
            }
        }

        server {
            listen 443 ssl http2;
            server_name gpsfinanceiro.com.br www.gpsfinanceiro.com.br;

            ssl_certificate /etc/letsencrypt/live/gpsfinanceiro.com.br/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/gpsfinanceiro.com.br/privkey.pem;
            ssl_trusted_certificate /etc/letsencrypt/live/gpsfinanceiro.com.br/chain.pem;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers on;
            ssl_session_cache shared:SSL:10m;
            ssl_session_tickets off;
            ssl_stapling on;
            ssl_stapling_verify on;
            resolver 8.8.8.8 1.1.1.1 valid=300s;

            # HSTS and security headers
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;

            # Frontend - Next.js
            location /dashboard {
                proxy_pass http://frontend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Cookie $http_cookie;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 60s;
                add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            }

            location / {
                proxy_pass http://frontend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Cookie $http_cookie;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 60s;
            }

            # Backend API
            location /api/ {
                proxy_pass http://backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Cookie $http_cookie;
                proxy_cache_bypass $http_upgrade;
                # CORS: reflect incoming origin (allows both apex and www) — if you need stricter control, change to explicit origin
                add_header 'Access-Control-Allow-Origin' '$http_origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
                if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '$http_origin';
                    add_header 'Access-Control-Allow-Credentials' 'true';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
            }

            # Static files for frontend
            location /_next/static/ {
                proxy_pass http://frontend;
                proxy_cache_valid 200 1y;
                add_header Cache-Control "public, immutable";
            }

            # Favicon and other static assets
            location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff2?|ttf|eot)$ {
                proxy_pass http://frontend;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Error pages
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root html;
            }
        }

        # Configuração básica do Nginx
        server {
            listen 80;
            server_name localhost;

            # Diretório raiz
            root /usr/share/nginx/html;

            # Configuração de logs
            error_log /var/log/nginx/error.log;
            access_log /var/log/nginx/access.log;

            # Configuração de localização
            location / {
                try_files $uri /index.html;
            }
        }

        # Garantir que o diretório de logs exista (no Dockerfile/container, crie antes de iniciar nginx)
    }
