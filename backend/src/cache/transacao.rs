//! M√≥dulo de cache para transa√ß√µes
//!
//! Implementa cache com VecDeque para at√© 20 transa√ß√µes por usu√°rio,
//! com suporte para p√°ginas 1 e 2 apenas, e mecanismo de seguran√ßa.

use std::sync::Arc;
use tokio::sync::RwLock;
use tracing::{info, debug, warn};
use crate::{cache_key, cache::{RIDER_CACHE, types::*}};
use crate::models::transacao::Transacao;

/// Obt√©m transa√ß√µes em cache para uma p√°gina espec√≠fica (apenas p√°ginas 1 e 2)
pub async fn get_cached_transactions(user_id: &str, page: usize, page_size: usize) -> Option<Vec<Transacao>> {
    dev_println!("üîç CACHE-TRANSACAO: Buscando transa√ß√µes em cache para usu√°rio: {}, p√°gina: {}, tamanho: {}", 
            user_id, page, page_size);

    if page > 2 {
        dev_println!("‚ùå CACHE-TRANSACAO: Cache MISS - p√°gina {} > 2 (cache s√≥ serve p√°ginas 1 e 2)", page);
        debug!("Cache miss: p√°gina {} > 2 para usu√°rio {}", page, user_id);
        return None; // Cache s√≥ serve p√°ginas 1 e 2
    }

    let key = cache_key!(transactions, user_id);

    if let Some(cache_data_arc) = RIDER_CACHE.transactions.get(&key).await {
        let cache_data = cache_data_arc.read().await;

        dev_println!("‚úÖ CACHE-TRANSACAO: Cache HIT! Cache encontrado para usu√°rio: {}", user_id);
        dev_println!("üìä CACHE-TRANSACAO: Cache info - Total: {}, Novas: {}, Tem dados novos: {}", 
                cache_data.len(), cache_data.total_new_transactions, cache_data.has_new_data);

        // Sempre retorna Some quando o cache existe (mesmo que vazio),
        // permitindo aos testes verificar presen√ßa do cache.
        let transactions = cache_data.get_page(page, page_size);

        dev_println!("üìù CACHE-TRANSACAO: Retornando {} transa√ß√µes da p√°gina {}", transactions.len(), page);
        info!("Cache retornou p√°gina {} para usu√°rio {} ({} transa√ß√µes)", page, user_id, transactions.len());
        return Some(transactions);
    }

    dev_println!("‚ùå CACHE-TRANSACAO: Cache MISS - nenhum cache encontrado para usu√°rio: {}", user_id);
    debug!("Cache miss: p√°gina {} para usu√°rio {}", page, user_id);
    None
}

/// Adiciona uma nova transa√ß√£o ao cache (no in√≠cio da VecDeque)
pub async fn add_new_transaction(user_id: &str, transacao: Transacao) {
    let key = cache_key!(transactions, user_id);

    dev_println!("‚ûï CACHE-TRANSACAO: Adicionando nova transa√ß√£o para usu√°rio: {}", user_id);
    dev_println!("üìù CACHE-TRANSACAO: Transa√ß√£o - ID: {}, Tipo: {}, Valor: {} centavos", 
            transacao.id, transacao.tipo, transacao.valor);

    // Busca ou cria cache_data para o usu√°rio
    let cache_data_arc = RIDER_CACHE.transactions.get_with_by_ref(&key, async {
        dev_println!("üÜï CACHE-TRANSACAO: Criando novo cache de transa√ß√µes para usu√°rio: {}", user_id);
        Arc::new(RwLock::new(TransactionCacheData::new()))
    }).await;

    let mut cache_data = cache_data_arc.write().await;

    dev_println!("üìä CACHE-TRANSACAO: Estado ANTES - Total: {}, Novas: {}", 
            cache_data.len(), cache_data.total_new_transactions);

    // Adiciona transa√ß√£o como nova (new = true)
    cache_data.add_transaction(transacao);

    dev_println!("üìä CACHE-TRANSACAO: Estado AP√ìS - Total: {}, Novas: {}", 
            cache_data.len(), cache_data.total_new_transactions);

    info!("Nova transa√ß√£o adicionada ao cache para usu√°rio {} (total: {}, novas: {})", 
          user_id, cache_data.len(), cache_data.total_new_transactions);

    // Log de aviso se aproximando do limite de seguran√ßa
    if cache_data.total_new_transactions >= 15 {
        dev_println!("‚ö†Ô∏è CACHE-TRANSACAO: ATEN√á√ÉO! Usu√°rio {} tem {} transa√ß√µes novas. Pr√≥ximo do limite de seguran√ßa (20)!", 
              user_id, cache_data.total_new_transactions);
        warn!("Usu√°rio {} tem {} transa√ß√µes novas. Pr√≥ximo do limite de seguran√ßa (20)", 
              user_id, cache_data.total_new_transactions);
    }

    dev_println!("‚úÖ CACHE-TRANSACAO: Nova transa√ß√£o adicionada com sucesso");
}

/// Salva transa√ß√µes iniciais no cache (primeira carga da p√°gina)
pub async fn set_cached_transactions(user_id: &str, transactions: Vec<Transacao>) {
    let key = cache_key!(transactions, user_id);

    let cache_data_arc = RIDER_CACHE.transactions.get_with_by_ref(&key, async {
        Arc::new(RwLock::new(TransactionCacheData::new()))
    }).await;

    let mut cache_data = cache_data_arc.write().await;
    cache_data.set_transactions(transactions, 1, None);

    info!("Cache de transa√ß√µes inicializado para usu√°rio {} ({} transa√ß√µes)", 
          user_id, cache_data.len());
}

/// Retorna apenas transa√ß√µes marcadas como novas (new: true)
pub async fn get_new_transactions(user_id: &str) -> Option<Vec<TransacaoCached>> {
    let key = cache_key!(transactions, user_id);

    dev_println!("üîç CACHE-TRANSACAO: Buscando transa√ß√µes NOVAS para usu√°rio: {}", user_id);

    if let Some(cache_data_arc) = RIDER_CACHE.transactions.get(&key).await {
        let cache_data = cache_data_arc.read().await;
        let new_transactions: Vec<TransacaoCached> = cache_data.get_new_transactions();

        if !new_transactions.is_empty() {
            dev_println!("‚úÖ CACHE-TRANSACAO: Encontradas {} transa√ß√µes novas", new_transactions.len());
            for (index, tx) in new_transactions.iter().enumerate() {
                dev_println!("üìù CACHE-TRANSACAO: Transa√ß√£o nova {}: ID={}, Tipo={}, Valor={}", 
                        index + 1, tx.transacao.id, tx.transacao.tipo, tx.transacao.valor);
            }
            debug!("Encontradas {} transa√ß√µes novas para usu√°rio {}", new_transactions.len(), user_id);
            return Some(new_transactions);
        } else {
            dev_println!("üìù CACHE-TRANSACAO: Nenhuma transa√ß√£o nova encontrada (cache existe mas est√° vazio)");
        }
    } else {
        dev_println!("‚ùå CACHE-TRANSACAO: Nenhum cache de transa√ß√µes encontrado para usu√°rio: {}", user_id);
    }

    None
}

/// Marca todas as transa√ß√µes como processadas (new = false)
pub async fn mark_transactions_as_processed(user_id: &str) {
    let key = cache_key!(transactions, user_id);

    dev_println!("‚úÖ CACHE-TRANSACAO: Marcando transa√ß√µes como processadas para usu√°rio: {}", user_id);

    if let Some(cache_data_arc) = RIDER_CACHE.transactions.get(&key).await {
        let mut cache_data = cache_data_arc.write().await;
        let new_count = cache_data.total_new_transactions;

        dev_println!("üìä CACHE-TRANSACAO: Marcando {} transa√ß√µes como processadas", new_count);
        cache_data.mark_all_as_processed();

        dev_println!("‚úÖ CACHE-TRANSACAO: Todas as transa√ß√µes foram marcadas como processadas");
        info!("Marcadas {} transa√ß√µes como processadas para usu√°rio {}", new_count, user_id);
    } else {
        dev_println!("‚ö†Ô∏è CACHE-TRANSACAO: Nenhum cache encontrado para marcar como processado");
    }
}

/// Verifica se h√° muitas transa√ß√µes novas (mecanismo de seguran√ßa)
pub async fn check_cache_safety(user_id: &str) -> bool {
    let key = cache_key!(transactions, user_id);

    if let Some(cache_data_arc) = RIDER_CACHE.transactions.get(&key).await {
        let cache_data = cache_data_arc.read().await;
        if cache_data.has_too_many_new_transactions() {
            dev_println!("ÔøΩ MECANISMO-DE-SEGURANCA: usu√°rio {} tem {} transa√ß√µes novas (>=15).", 
                         user_id, cache_data.total_new_transactions);
            warn!("MECANISMO DE SEGURAN√áA: usu√°rio {} tem {} transa√ß√µes novas (>= 15). Cache n√£o confi√°vel.", 
                  user_id, cache_data.total_new_transactions);
            return false;
        }
    }

    true
}

/// Limpa cache de transa√ß√µes de um usu√°rio espec√≠fico
pub async fn clear_user_transaction_cache(user_id: &str) {
    let key = cache_key!(transactions, user_id);

    dev_println!("üóëÔ∏è CACHE-TRANSACAO: Limpando cache de transa√ß√µes para usu√°rio: {}", user_id);
    RIDER_CACHE.transactions.remove(&key).await;
    dev_println!("‚úÖ CACHE-TRANSACAO: Cache de transa√ß√µes limpo com sucesso para usu√°rio: {}", user_id);

    info!("Cache de transa√ß√µes limpo para usu√°rio {}", user_id);
}


#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Utc;

    fn create_test_transacao(id: &str, valor: i32) -> Transacao {
        // Criar uma transa√ß√£o de teste b√°sica
        Transacao {
            id: id.to_string(),
            id_usuario: "test_user".to_string(),
            id_categoria: "cat1".to_string(),
            valor,
            eventos: 1,
            descricao: Some("Teste".to_string()),
            tipo: "entrada".to_string(),
            data: Utc::now().naive_utc(),
            criado_em: Utc::now().naive_utc(),
            atualizado_em: Utc::now().naive_utc(),
        }
    }

    #[tokio::test]
    async fn test_add_and_get_transactions() {
        let user_id = "test_user_1";
        let transacao = create_test_transacao("tx1", 100);

        // Adicionar transa√ß√£o
        add_new_transaction(user_id, transacao.clone()).await;

        // Buscar primeira p√°gina
        let result = get_cached_transactions(user_id, 1, 10).await;
        assert!(result.is_some());
        assert_eq!(result.unwrap().len(), 1);
    }

    #[tokio::test]
    async fn test_page_limit() {
        let user_id = "test_user_2";
        let transacao = create_test_transacao("tx1", 100);

        add_new_transaction(user_id, transacao).await;

        // P√°ginas 1 e 2 devem funcionar
        assert!(get_cached_transactions(user_id, 1, 10).await.is_some());
        assert!(get_cached_transactions(user_id, 2, 10).await.is_some());

        // P√°gina 3 deve retornar None
        assert!(get_cached_transactions(user_id, 3, 10).await.is_none());
    }
}
